# -*- coding: utf-8 -*-
"""M1_W3_Q2_Ward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Qz7CCYz64zTEgUNxw1Q--3hg-waQdOE
"""

from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name: str, yob: int):
        self.name = name
        self.yob = yob

    @abstractmethod
    def describe(self):
        pass

class Student(Person):
    def __init__(self, name: str, yob: int, grade: str):
        super().__init__(name, yob)
        self.grade = grade

    def describe(self):
        print(f"Student - Name: {self.name} - YoB: {self.yob} - Grade: {self.grade}")

class Teacher(Person):
    def __init__(self, name: str, yob: int, subject: str):
        super().__init__(name, yob)
        self.subject = subject

    def describe(self):
        print(f"Teacher - Name: {self.name} - YoB: {self.yob} - Subject: {self.subject}")

class Doctor(Person):
    def __init__(self, name: str, yob: int, specialist: str):
        super().__init__(name, yob)
        self.specialist = specialist

    def describe(self):
        print(f"Doctor - Name: {self.name} - YoB: {self.yob} - Specialist: {self.specialist}")

student1 = Student(name="studentA", yob=2010, grade="7")
student1.describe()

teacher1 = Teacher(name="teacherA", yob=1969, subject="Math")
teacher1.describe()

doctor1 = Doctor(name="doctorA", yob=1945, specialist="Endocrinologists")
doctor1.describe()

class Ward:
    def __init__(self, name: str):
        self.name = name
        self.list_people = []

    def add_person(self, person: Person):
        self.list_people.append(person)

    def describe(self):
        print(f"Ward Name: {self.name}")
        for person in self.list_people:
            person.describe()

    def count_doctor(self):
        return sum(1 for person in self.list_people if isinstance(person, Doctor))

    def sort_age(self):
        self.list_people.sort(key=lambda person: person.yob, reverse=True)

    def compute_average(self):
        teachers = [person.yob for person in self.list_people if isinstance(person, Teacher)]
        return sum(teachers) / len(teachers) if teachers else 0

# 2(a)
student1 = Student(name="studentA", yob=2010, grade="7")
student1.describe()

teacher1 = Teacher(name="teacherA", yob=1969, subject="Math")
teacher1.describe()

doctor1 = Doctor(name="doctorA", yob=1945, specialist="Endocrinologists")
doctor1.describe()

# 2(b)
print()
teacher2 = Teacher(name="teacherB", yob=1995, subject="History")
doctor2 = Doctor(name="doctorB", yob=1975, specialist="Cardiologists")
ward1 = Ward(name="Ward1")
ward1.add_person(student1)
ward1.add_person(teacher1)
ward1.add_person(teacher2)
ward1.add_person(doctor1)
ward1.add_person(doctor2)
ward1.describe()

# 2(c)
print(f"\nNumber of doctors: {ward1.count_doctor()}")

# 2(d)
print("\nAfter sorting Age of Ward1 people")
ward1.sort_age()
ward1.describe()

# 2(e)
print(f"\nAverage year of birth (teachers): {ward1.compute_average()}")

"""trắc nghiệm"""

from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name:str, yob:int):
        self._name = name.strip()
        self._yob = yob

    def get_yob(self):
        return self._yob

    @abstractmethod
    def describe(self):
        pass

class Student(Person):
    def __init__(self, name:str, yob:int, grade:str):
        super().__init__(name, yob)
        self._grade = grade.strip()

    def describe(self):
        print(f"Student - Name: {self._name}, YoB: {self._yob}, Grade: {self._grade}")

student1 = Student(name=" studentZ2023 ", yob=2011, grade="6")
assert student1._yob == 2011
student1.describe()

from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name:str, yob:int):
        self._name = name.strip()
        self._yob = yob

    def get_yob(self):
        return self._yob

    @abstractmethod
    def describe(self):
        pass

class Teacher(Person):
    def __init__(self, name:str, yob:int, subject:str):
        super().__init__(name, yob)
        self._subject = subject.strip()
    def describe(self):
        print(f"Teacher - Name: {self._name}, YoB: {self._yob}, Subject: {self._subject}")

teacher1 = Teacher(name=" teacherZ2023 ", yob=1991, subject=" History ")
assert teacher1._yob == 1991
teacher1.describe()

from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name:str, yob:int):
        self._name = name.strip()
        self._yob = yob

    def get_yob(self):
        return self._yob

    @abstractmethod
    def describe(self):
        pass

class Doctor(Person):
    def __init__(self, name:str, yob:int, specialist:str):
        super().__init__(name, yob)
        self._specialist = specialist.strip()  #

    def describe(self):
        print(f"Doctor - Name: {self._name}, YoB: {self._yob}, Specialist: {self._specialist}")

doctor1 = Doctor(name=" doctorZ2023 ", yob=1981, specialist=" Endocrinologists ")
assert doctor1._yob == 1981
doctor1.describe()

from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name: str, yob: int):
        self._name = name.strip()
        self._yob = yob

    @abstractmethod
    def describe(self):
        pass

class Student(Person):
    def __init__(self, name: str, yob: int, grade: str):
        super().__init__(name, yob)
        self._grade = grade.strip()

    def describe(self):
        print(f"Student - Name: {self._name}, YoB: {self._yob}, Grade: {self._grade}")

class Teacher(Person):
    def __init__(self, name: str, yob: int, subject: str):
        super().__init__(name, yob)
        self._subject = subject.strip()

    def describe(self):
        print(f"Teacher - Name: {self._name}, YoB: {self._yob}, Subject: {self._subject}")

class Doctor(Person):
    def __init__(self, name: str, yob: int, specialist: str):
        super().__init__(name, yob)
        self._specialist = specialist.strip()

    def describe(self):
        print(f"Doctor - Name: {self._name}, YoB: {self._yob}, Specialist: {self._specialist}")

class Ward:
    def __init__(self, name: str):
        self.__name = name
        self.__listPeople = []

    def add_person(self, person: Person):
        self.__listPeople.append(person)

    def describe(self):
        print(f"Ward Name: {self.__name}")
        for person in self.__listPeople:
            person.describe()

    def count_doctor(self):
        return sum(isinstance(person, Doctor) for person in self.__listPeople)

ward1 = Ward(name="Ward1")
student1 = Student(name="studentA", yob=2010, grade="7")
teacher1 = Teacher(name="teacherA", yob=1969, subject="Math")
teacher2 = Teacher(name="teacherB", yob=1995, subject="History")
doctor1 = Doctor(name="doctorA", yob=1945, specialist="Endocrinologists")
doctor2 = Doctor(name="doctorB", yob=1975, specialist="Cardiologists")

ward1.add_person(student1)
ward1.add_person(teacher1)
ward1.add_person(teacher2)
ward1.add_person(doctor1)
ward1.add_person(doctor2)

print("Number of doctors in the ward:", ward1.count_doctor())
ward1.describe()