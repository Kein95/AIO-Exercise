# -*- coding: utf-8 -*-
"""M3_W4_Ensemble_Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kvB5lk9skKVRSUBqK2nwL2jULqT1EgNl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

dataset_path = '/content/Housing.csv'
df = pd.read_csv(dataset_path)

df.head()

categorical_cols = df.select_dtypes(include=['object']).columns.to_list()
print(categorical_cols)

# Sử dụng OrdinalEncoder để chuyển đổi các cột này
ordinal_encoder = OrdinalEncoder()
encoded_categorical_cols = ordinal_encoder.fit_transform(df[categorical_cols])

# Chuyển kết quả từ mảng numpy thành DataFrame và gán lại tên cột
encoded_categorical_df = pd.DataFrame(encoded_categorical_cols, columns=categorical_cols)

# Bỏ các cột chuỗi gốc ra khỏi DataFrame ban đầu
numerical_df = df.drop(categorical_cols, axis=1)

# Gộp lại DataFrame với các cột đã được mã hóa
encoded_df = pd.concat([numerical_df, encoded_categorical_df], axis=1)

# Hiển thị kết quả dưới dạng bảng
print(encoded_df.head().to_string(index=False))

# Khởi tạo đối tượng StandardScaler
normalizer = StandardScaler()

# Chuẩn hóa dữ liệu
dataset_arr = normalizer.fit_transform(encoded_df)

# Hiển thị kết quả đã chuẩn hóa
print(dataset_arr[:5])

# Tách dữ liệu thành X và y
X, y = dataset_arr[:, 1:], dataset_arr[:, 0]

# Hiển thị một phần dữ liệu để kiểm tra
print("X (features):\n", X[:5])
print("y (target):\n", y[:5])

# Thiết lập tham số chia dữ liệu
test_size = 0.3
random_state = 1
is_shuffle = True

# Chia dữ liệu thành tập huấn luyện và kiểm tra
X_train, X_val, y_train, y_val = train_test_split(
    X, y,
    test_size=test_size,
    random_state=random_state,
    shuffle=is_shuffle
)

# Hiển thị kích thước của các tập dữ liệu để kiểm tra
print("X_train shape:", X_train.shape)
print("X_val shape:", X_val.shape)
print("y_train shape:", y_train.shape)
print("y_val shape:", y_val.shape)

# Khởi tạo mô hình Random Forest
regressor_rf = RandomForestRegressor(random_state=random_state)

# Huấn luyện mô hình
regressor_rf.fit(X_train, y_train)

from sklearn.ensemble import AdaBoostRegressor

# Khởi tạo mô hình AdaBoost
regressor_ab = AdaBoostRegressor(random_state=random_state)

# Huấn luyện mô hình
regressor_ab.fit(X_train, y_train)

from sklearn.ensemble import GradientBoostingRegressor

# Khởi tạo mô hình Gradient Boosting
regressor_gb = GradientBoostingRegressor(random_state=random_state)

# Huấn luyện mô hình
regressor_gb.fit(X_train, y_train)

# Sử dụng mô hình để dự đoán trên tập kiểm tra
y_pred = regressor_rf.predict(X_val)

# Tính toán MAE và MSE
mae = mean_absolute_error(y_val, y_pred)
mse = mean_squared_error(y_val, y_pred)

# Hiển thị kết quả đánh giá
print('Evaluation results on validation set:')
print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')