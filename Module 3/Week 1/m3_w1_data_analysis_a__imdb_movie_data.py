# -*- coding: utf-8 -*-
"""M3_W1_Data_Analysis_A_ IMDB_Movie_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gK5EJUAaxT8mmIOppsdo487bV6q7YkNO
"""

# Dataset A: https://drive.google.com/file/d/1xaj40SRwgcabIxsV1SeNKv2M4UtI3h80/view?usp=share_link
!gdown 1xaj40SRwgcabIxsV1SeNKv2M4UtI3h80

!pip install pandas numpy matplotlib seaborn

"""1. Import libraries và load dataset:"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataset_path = '/content/IMDB-Movie-Data.csv'
data = pd.read_csv(dataset_path)

data_indexed = pd.read_csv(dataset_path, index_col="Title")
data

"""2. View the data:"""

data.head()  # Hiển thị 5 dòng đầu tiên của dữ liệu

"""3. Understand some basic information about the data:"""

data.info()  # Thông tin tổng quan về dữ liệu

data.describe()  # Thống kê cơ bản về dữ liệu

"""4. Data Selection – Indexing and Slicing data:"""

# Extract data as series
genre = data['Genre']
genre

# Extract data as dataframe
data [['Genre']]

some_cols = data[['Title', 'Genre', 'Actors', 'Director', 'Rating']]
print(some_cols)

data.iloc[10:15][['Title', 'Rating', 'Revenue (Millions)']]

"""5. Data Selection – Based on Conditional filtering:"""

filtered_data = data[((data['Year'] >= 2010) & (data['Year'] <= 2015))
                    & (data['Rating'] < 6.0)
                    & (data['Revenue (Millions)'] > data['Revenue (Millions)'].quantile(0.95))]
print(filtered_data)

"""6. Groupby Operations:"""

result = data.groupby('Director')[['Rating']].mean().head()
print(result)

"""7. Sorting Operations:"""

result = data.groupby('Director')[['Rating']].mean().sort_values(['Rating'], ascending=False).head()
print(result)

"""8. View missing values:"""

missing_values = data.isnull().sum()
print(missing_values)

"""9. Deal with missing values - Deleting"""

data = pd.read_csv('/content/IMDB-Movie-Data.csv')

data.drop('Metascore', axis=1).head()

data.dropna()

"""10. Dealing with missing values - Filling:"""

revenue_mean = data_indexed['Revenue (Millions)'].mean()
print("The mean revenue is:", revenue_mean)

data_indexed['Revenue (Millions)'].fillna(revenue_mean, inplace=True)

print(data_indexed.head())

"""11. apply() functions:"""

# Classify movies based on ratings
def rating_group(rating):
    if rating >= 7.5:
        return 'Good'
    elif rating >= 6.0:
        return 'Average'
    else:
        return 'Bad'

data['Rating_category'] = data['Rating'].apply(rating_group)
print(data[['Title', 'Director', 'Rating', 'Rating_category']].head(5))