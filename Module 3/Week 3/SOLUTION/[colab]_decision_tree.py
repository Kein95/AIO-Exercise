# -*- coding: utf-8 -*-
"""[Colab]-Decision-Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lnz4WuaDEnIDMMJbCwF95nDPDum3_lrF

# **DECISION TREE**

# **Decision Tree for Classification**

## **Gini**
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier

data = {'age': [23, 25, 27, 29, 29],
        'likes english': [0, 1, 1, 0, 0],
        'likes ai': [0, 1, 0, 1, 0],
        'raise salary': [0, 0, 1, 1, 0]}

# load data
df = pd.DataFrame(data)

# get value and convert to numpy
X = df[['age', 'likes english', 'likes ai']].values
y = df[['raise salary']].values.reshape(-1,)

# define classifier
clf = DecisionTreeClassifier()

# train
clf = clf.fit(X, y)

# predict

x_test = np.array([[27, 0, 1]])
predicted_label = clf.predict(x_test)
predicted_label

from sklearn.tree import plot_tree

# visualization
plot_tree(clf, feature_names=['age', 'likes english', 'likes ai'], fontsize=10)

"""## **Information Gain**"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier

data = {'age': [23, 25, 27, 29, 29],
        'likes english': [0, 1, 1, 0, 0],
        'likes ai': [0, 1, 0, 1, 0],
        'raise salary': [0, 0, 1, 1, 0]}

# load data
df = pd.DataFrame(data)

# get value and convert to numpy
X = df[['age', 'likes english', 'likes ai']].values
y = df[['raise salary']].values.reshape(-1,)

# define classifier
clf = DecisionTreeClassifier(criterion='entropy')

# train
clf = clf.fit(X, y)

# predict
x_test = np.array([[27, 0, 1]])
predicted_label = clf.predict(x_test)
predicted_label

from sklearn.tree import plot_tree

# visualization
plot_tree(clf, feature_names=['age', 'likes english', 'likes ai'], fontsize=10)

"""##**IRIS Dataset**"""

import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error
from sklearn.tree import DecisionTreeClassifier

# Load the diabetes dataset
iris_X, iris_y = datasets.load_iris(return_X_y=True)

iris_X[:2]

iris_y[:2]

# Split train:test = 8:2
X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size=0.2, random_state=42)

# Defining an object for DTC and fitting for whole dataset
dt_classifier = DecisionTreeClassifier()
dt_classifier.fit(X_train, y_train)

y_pred = dt_classifier.predict(X_test)

y_test[:2]

y_pred[:2]

accuracy_score(y_test, y_pred)

from sklearn.tree import plot_tree

# visualization
plot_tree(dt_classifier, feature_names=["Sepal_Length", "Sepal_Width", "Petal_Length", "Petal_Width"])

"""# **Decision Tree for Regreesion**

## **Sum of Squared Error**
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeRegressor

data = {'age': [23, 25, 27, 29, 29],
        'likes english': [0, 1, 1, 0, 0],
        'likes ai': [0, 1, 0, 1, 0],
        'salary': [200, 400, 300, 500, 400]}

# load data
df = pd.DataFrame(data)

# get value and convert to numpy
X = df[['age', 'likes english', 'likes ai']].values
y = df[['salary']].values.reshape(-1,)

# define regressor
reg = DecisionTreeRegressor()

# train
reg = reg.fit(X, y)

# predict
x_test = np.array([[18, 1, 1]])
predicted_salary = clf.predict(x_test)
predicted_salary

from sklearn.tree import plot_tree

plot_tree(reg, feature_names=['age', 'likes english', 'likes ai'], fontsize=6)

"""## **CPU Machine Dataset**"""

import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.tree import DecisionTreeRegressor

from sklearn.datasets import fetch_openml

machine_cpu = fetch_openml(name='machine_cpu')

print(machine_cpu.DESCR)

machine_cpu.frame

# Load dataset
machine_data = machine_cpu.data
machine_labels = machine_cpu.target

X_train, X_test, y_train, y_test = train_test_split(machine_data, machine_labels, test_size=0.2,random_state=20)

from sklearn.tree import DecisionTreeRegressor

tree_reg = DecisionTreeRegressor()

tree_reg.fit(X_train, y_train)

y_pred = tree_reg.predict(X_test)

y_pred[:2]

y_test[:2]

mean_squared_error(y_test, y_pred)

from sklearn.tree import plot_tree

plot_tree(reg, feature_names=['MYCT', 'MMIN', 'MMAX', 'CACH', 'CHMIN', 'CHMAX'])