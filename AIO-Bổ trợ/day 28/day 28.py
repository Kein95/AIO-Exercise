# -*- coding: utf-8 -*-
"""ÔN LUYỆN CHO MODUL 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3ovaULkcx38Dh9EFAqFOCToYIBYbYAc

# Day 28: Basic Python - Einsum in Numpy
https://drive.google.com/file/d/1icnihbS9WKTrx4tAxfGyx7H1VMS7we_B/view
"""

# 1. Nhân ma trận (Matrix multiplication)
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
C = np.einsum('ij,jk->ik', A, B)
print(C)
# Output: [[19 22] [43 50]]

# 2. Tính tổng của các phần tử trong một mảng
import numpy as np

a = np.array([1, 2, 3, 4])
sum_a = np.einsum('i->', a)
print(sum_a)  # Output: 10

# 3. Nhân chéo (Outer product)
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
outer_product = np.einsum('i,j->ij', a, b)
print(outer_product)  # Output: [[ 4  5  6] [ 8 10 12] [12 15 18]]

# Bài tập 1: Tính tổng của các cột trong ma trận
# Sử dụng einsum để tính tổng của từng cột trong ma trận 2D.
import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
column_sums = np.einsum('ij->j', A)
print(column_sums)  # Output: [12 15 18]

# Bài tập 2: Tính tích vô hướng của hai ma trận
# Sử dụng einsum để tính tích vô hướng (dot product) của hai ma trận 2D.
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
dot_product = np.einsum('ij,ij->', A, B)
print(dot_product)  # Output: 70

# Bài tập 3: Tính tổng các phần tử trên đường chéo chính của ma trận
# Sử dụng einsum để tính tổng các phần tử trên đường chéo chính của ma trận 2D.
import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
diagonal_sum = np.einsum('ii->', A)
print(diagonal_sum)  # Output: 15

# Bài tập 4: Nhân hai ma trận 2D
# Sử dụng einsum để thực hiện phép nhân hai ma trận 2D.
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
C = np.einsum('ij,jk->ik', A, B)
print(C)  # Output: [[19 22][43 50]]

# Bài tập 5: Tính tích ngoài của hai vector
# Sử dụng einsum để tính tích ngoài (outer product) của hai vector.
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
outer_product = np.einsum('i,j->ij', a, b)
print(outer_product)  # Output: [[ 4  5  6] [ 8 10 12] [12 15 18]]

# Bài tập 6: Tính ma trận Gram của một tensor 3D
# Sử dụng einsum để tính ma trận Gram của một tensor 3D có kích thước (channels, height, width).
import numpy as np

def gram_matrix(tensor):
    # tensor có shape (channels, height, width)
    channels, height, width = tensor.shape

    # Reshape tensor thành ma trận 2D (channels, height * width)
    features = tensor.reshape(channels, height * width)

    # Tính ma trận Gram
    gram = np.einsum('ij,kj->ik', features, features)

    return gram

tensor = np.random.rand(3, 4, 4)
gram = gram_matrix(tensor)
print(gram)