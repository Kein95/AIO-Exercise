# -*- coding: utf-8 -*-
"""M2_W2_Q1_Vector_Matrix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WBeh99VV5uO8NMBJ5eVhr2wBkCajFtBc
"""

#(a) Độ dài của vector:

import numpy as np
def computeVectorLength(vector):
  len_of_vector = np.linalg.norm(vector)

  return len_of_vector

vector = np.array([-2, 4, 9, 21])
result = computeVectorLength([vector])
print(round(result,2))

#(b) Phép tích vô hướng:

import numpy as np
def computeDotProduct(vector1, vector2):
  result = np.dot(vector1, vector2)

  return result

v1 = np.array([0, 1, -1, 2])
v2 = np.array([2, 5, 1, 0])
result = computeDotProduct(v1, v2)

print(round(result,2))

x = np.array([[1, 2],
              [3, 4]])
k = np.array([1, 2])
print('result  \n', computeDotProduct(x, k))
print('result 1 \n', x.dot(k))

x = np.array([[-1, 2],
              [3, -4]])
k = np.array([1, 2])
print('result \n', x@k)

#(c) Nhân vector với ma trận:

import numpy as np

def matrix_multi_vector(matrix, vector):
    result = np.dot(matrix, vector)
    return result

m = np.array([[-1, 1, 1], [0, -4, 9]])
v = np.array([0, 2, 1])
result = matrix_multi_vector(m, v)
print(result)

#(d) Nhân ma trận với ma trận:

import numpy as np

def matrix_multi_matrix(matrix1, matrix2):
    result = np.dot(matrix1, matrix2)
    return result

m1 = np.array([[0, 1, 2], [2, -3, 1]])
m2 = np.array([[1, -3],[6, 1], [0, -1]])
result = matrix_multi_matrix(m1, m2)
print(result)

m1 = np.eye(3)
m2 = np.array([[1, 1, 1],[2, 2, 2], [3, 3, 3]])
result = m1@m2
print(result)

m1 = np.eye(2)
m1 = np.reshape(m1,(-1,4))[0]
m2 = np.array([[1, 1, 1, 1],[2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]])
result = m1@m2
print(result)

m1 = np.array([[1, 2], [3, 4]])
m1 = np.reshape(m1,(-1,4), "F")[0]
m2 = np.array([[1, 1, 1, 1],[2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]])
result = m1@m2
print(result)

#(e) Ma trận nghịch đảo:

import numpy as np

def inverse_matrix(matrix):
    result = np.linalg.inv(matrix)
    return result

matrix = np.array([[-2, 6], [8, -4]])
result = inverse_matrix(matrix)
print(result)