# -*- coding: utf-8 -*-
"""M5_W1_Multiple_choice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YQo3jYTx37reqAQ6MxSlLEScylLfO1UJ
"""

import numpy as np

def predict(X, theta):
    z = np.dot(X, theta)
    return 1 / (1 + np.exp(-z))

# Khai báo tham số
X = np.array([[22.3, -1.5, 1.1, 1]])
theta = np.array([0.1, -0.15, 0.3, -0.2])

# Tính kết quả
result = predict(X, theta)
print("Câu 13 - Kết quả:", result)

def compute_loss(y_hat, y):
    y_hat = np.clip(y_hat, 1e-7, 1 - 1e-7)
    return (-y * np.log(y_hat) - (1 - y) * np.log(1 - y_hat)).mean()

# Khai báo tham số
y = np.array([1, 0, 0, 1])
y_hat = np.array([0.8, 0.75, 0.3, 0.95])

# Tính kết quả
result = compute_loss(y_hat, y)
print("Câu 14 - Kết quả:", round(result, 3))

def compute_gradient(X, y_true, y_pred):
    gradient = np.dot(X.T, (y_pred - y_true)) / y_true.size
    return gradient

# Khai báo tham số
X = np.array([[1, 2], [2, 1], [1, 1], [2, 2]])
y_true = np.array([0, 1, 0, 1])
y_pred = np.array([0.25, 0.75, 0.4, 0.8])

# Tính kết quả
result = compute_gradient(X, y_true, y_pred)
print("Câu 16 - Kết quả:", result)

def compute_accuracy(y_true, y_pred):
    y_pred_rounded = np.round(y_pred)
    accuracy = np.mean(y_true == y_pred_rounded)
    return accuracy

# Khai báo tham số
y_true = np.array([1, 0, 1, 1])
y_pred = np.array([0.85, 0.35, 0.9, 0.75])

# Tính kết quả
result = compute_accuracy(y_true, y_pred)
print("Câu 17 - Kết quả:", result)

def compute_gradient(X, y_true, y_pred):
    gradient = np.dot(X.T, (y_pred - y_true)) / y_true.size
    return gradient

# Khai báo tham số
X = np.array([[1, 3], [2, 1], [3, 2], [1, 2]])
y_true = np.array([1, 0, 1, 1])
y_pred = np.array([0.7, 0.4, 0.6, 0.85])

# Tính kết quả
result = compute_gradient(X, y_true, y_pred)
print("Câu 18 - Kết quả:", result)